# options

set-option -g prefix M-Space

set-option -w -g mode-keys vi

set-option -w -g mode-style "bg=red,fill=red,fg=black,bold"

set-option -g default-terminal "tmux-256color"

# Force a non-login shell when opening a pane (don't run .zprofile)
set-option -g default-command "$SHELL"

# enable 24-bit true color RGB escape sequences under terms
#set-option -ga terminal-overrides ",tmux-256color:Tc,xterm-256color:Tc,xterm-kitty:Tc,screen-256color:Tc"
if-shell '[ -n "$SSH_TTY" ]' { set-option -ga terminal-overrides ",tmux-256color:Tc" }
#set-option -ga terminal-overrides ",xterm-kitty:RGB"
# yank to system clipboard rather than primary selection http://invisible-island.net/xterm/terminfo-contents.html#tic-xterm_tmux
#set-option -ga terminal-overrides ',xterm*:Ms=\E]52;c;%p2%s\007'
# KiTTY always appends to clipboard; must clear it first https://sw.kovidgoyal.net/kitty/protocol-extensions.html#pasting-to-clipboard
#set-option -ga terminal-overrides ',xterm-kitty:Ms=\E]52;c;!\007\E]52;c;%p2%s\007'
#set-option -gs terminal-overrides ',tmux*:Ms=\\E]52;%p1%s;%p2%s\\007'

# allow set-titles to change the window title under XTerm
# http://opennomad.com/content/goodbye-screen-hello-tmux
#set-option -ga terminal-overrides ',xterm*:XT'
#set-option -ga terminal-overrides ',linux:RGB'

# Nested Tmux: https://github.com/kovidgoyal/kitty/issues/782#issuecomment-484382199
if-shell '[ -n "$SSH_TTY" ]' { set -ga terminal-overrides "tmux*:Ms=\\E]52;%p1%s;%p2%s\\007" }

set-option -g pane-active-border-style fg=green

set-option -g status-justify right
set-option -g status-bg black # colour213 # pink
set-option -g status-fg cyan
set-option -g status-interval 5
set-option -g status-left '#[fg=magenta]» #[fg=blue,bold]#T#[default]'
set-option -g status-left-length 30
if-shell -b '[ -z "$SSH_TTY" ]' {
  set-option -g status-right ' #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]#(TZ="America/Bogota" date "+%%m-%%d %%H:%%M")#(acpi | cut -d ',' -f 2)#[default]#{?client_prefix,#[fg=red] ^A,} #[bg=red,fg=black,bold]#{pane_mode}'
} \
{
  set-option -g status-right ' #[fg=cyan]»» #[fg=blue,bold]###S #[fg=magenta]#(date "+%%m-%%d %%H:%%M")#(acpi | cut -d ',' -f 2)#[default]#{?client_prefix,#[fg=red] ^A,} #[bg=white,fg=black,bold]#{pane_mode}'
}

set-option -w -g monitor-activity off
set-option -g visual-activity off
# auto-set terminal title to current window pane's title
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'

# prevent tmux from catching modifier keys meant for Vim
# check https://github.com/tmux/tmux/issues/353#issuecomment-294570322
set-option -s escape-time 10
# enable mouse support for general selection and control
set-option -g mouse on
set-option -g history-limit 100000
# allow Vim to recieve modifier keys: Shift, Control, Alt
set-option -w -g xterm-keys on
# allow Vim to receive focus events from terminal window
set-option -g focus-events on

set-option -w -g automatic-rename on
set-option -w -g window-status-current-style "fg=#ffffff,bg=#9d0006"
set-option -gw window-status-format '#I:#W#F#P'
set-option -gw window-status-current-format '#I:#W#F#{?window_zoomed_flag,#P/#{window_panes},#P}'
set-option -w -g aggressive-resize on

set-option -g base-index 1
# start pane number from 1 similar to windows
set-option -gw pane-base-index 1

# From https://github.com/kovidgoyal/kitty/issues/782#issuecomment-475242929
set-option -g set-clipboard on

set-option -g renumber-windows on

set-option -g display-time 4000

# copytk

set -g @copytk-quickcopy-match-0-0 urls
# # Match paths and filenames
# set -g @copytk-quickcopy-match-0-1 abspaths
set -g @copytk-quickcopy-match-1-0 paths
# set -g @copytk-quickcopy-match-1-1 filenames
# # Match IP addrs
# set -g @copytk-quickcopy-match-1-2 '(?:^|\W)([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})(?:$|\W)'
# # Match commands after the prompt
# set -g @copytk-quickcopy-match-2-0 '(?m)^[^\n]{0,80}\$ ([a-zA-Z][a-zA-Z0-9_-]*(?: [^\n]*)?)$'
# # Match numbers
# set -g @copytk-quickcopy-match-3-0 '-?[0-9]+(?:\.[0-9]+)?(?:[eE]-?[0-9]+)?'
# # Match quote-enclosed strings
# set -g @copytk-quickcopy-match-3-1 '"([^"\n]*)"'
# set -g @copytk-quickcopy-match-3-2 ''\''([^'\'\\'n]*)'\'
# # Match whole lines
# set -g @copytk-quickcopy-match-4-0 lines

# bindings

unbind-key C-b # unbind default leader key
bind-key M-Space send-prefix
# transfer copied text to attached terminal with yank:
# https://github.com/sunaku/home/blob/master/bin/yank
# bind-key -T copy-mode-vi 'Y' send-keys -X copy-pipe 'yank > #{pane_tty}'
# transfer most-recently copied text to attached terminal with yank:
# https://github.com/sunaku/home/blob/master/bin/yank
# bind-key -n M-y run-shell 'tmux save-buffer - | yank > #{pane_tty}'
# transfer previously copied text (chosen from a menu) to attached terminal:
# https://github.com/sunaku/home/blob/master/bin/yank
# bind-key -n M-Y choose-buffer 'run-shell "tmux save-buffer -b \"%%%\" - | yank > #{pane_tty}"'

# search buffer using copy mode
# bind-key -n M-/ copy-mode \;\
#   command-prompt -p 'search-backward (press up):' \
#     -i 'send-keys -X search-backward-incremental "%%%"'

# search colored buffer using less
# bind-key -n M-?                           \
#   capture-pane -e -J -S - \;              \
#   new-window -n '#S:#I.#P' -a '           \
#     tmux save-buffer - \; delete-buffer | \
#     less -R                               \
#   ' \;                                    \
#   run-shell 'tmux send-keys G \?'

# From https://github.com/christoomey/vim-tmux-navigator/blob/master/vim-tmux-navigator.tmux
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
        | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

####################################################################


# bind-key -T root M-Tab last-window
# bind-key -T root M-Enter break-pane

if-shell -b '[ -z "$SSH_TTY" ]' {
  set -g @copytk-copy-command "tee >(tmux load-buffer -) | xclip -in -selection clipboard >/dev/null"

  bind-key -T root M-\; command-prompt
  bind-key -T root M-c split-window -v -c '#{pane_current_path}'
  bind-key -T root M-v split-window -h -c '#{pane_current_path}'
  bind-key -T root M-h run-shell "if $is_vim ; then tmux send-keys M-h; else tmux select-pane -L; fi"
  bind-key -T root M-j run-shell "if $is_vim ; then tmux send-keys M-j; else tmux select-pane -D; fi"
  bind-key -T root M-k run-shell "if $is_vim ; then tmux send-keys M-k ; else tmux select-pane -U; fi"
  bind-key -T root M-l run-shell "if $is_vim ; then tmux send-keys M-l; else tmux select-pane -R; fi"
  bind-key -T root M-Left swap-pane -U
  bind-key -T root M-Right swap-pane -D
  bind-key -T root M-Up swap-window -d -t -1
  bind-key -T root M-Down swap-window -d -t +1
  bind-key -T root M-m new-window -c '#{pane_current_path}'
  bind-key -T root M-, new-window
  bind-key -T root M-z resize-pane -Z
  bind-key -T root M-0 select-window -T -t :=0
  bind-key -T root M-1 select-window -T -t :=1
  bind-key -T root M-2 select-window -T -t :=2
  bind-key -T root M-3 select-window -T -t :=3
  bind-key -T root M-4 select-window -T -t :=4
  bind-key -T root M-5 select-window -T -t :=5
  bind-key -T root M-6 select-window -T -t :=6
  bind-key -T root M-7 select-window -T -t :=7
  bind-key -T root M-8 select-window -T -t :=8
  bind-key -T root M-9 select-window -T -t :=9
  bind-key -T root M-[ copy-mode
  bind-key -T root M-] paste-buffer
  bind-key -T root M-= detach-client
  bind-key -T root M-n next-window
  bind-key -T root M-p previous-window
  bind-key -T root M-r refresh-client
  bind-key -T root M-F9 send-keys C-l \; run-shell 'sleep 0.2' \; clear-history
  bind-key -T root M-F12 send-keys -R \; run-shell 'sleep 0.2' \; clear-history
  bind-key -T root "M-'" last-window
  bind-key -T root M-Tab last-window
  bind-key -T root M-u copy-mode -u \; send-keys 0
  bind-key -T copy-mode-vi M-u send-keys -X page-up
  bind-key -T copy-mode-vi M-d send-keys -X page-down
  bind-key -T copy-mode-vi u send-keys -X page-up
  bind-key -T copy-mode-vi d send-keys -X page-down
  bind-key -T copy-mode-vi v send -X begin-selection
  # TODO 3.2 Add "pipe" variants of "copy-pipe" commands which do not copy.
  # This is for a command that will send to "tmux load-buffer -" and not copy using clipboard.
  bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard >/dev/null'
  bind-key -T copy-mode-vi Y send-keys -X copy-selection
  bind-key -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
  # search buffer using Vim or less
  bind-key -n M-\\                               \
    capture-pane -J -S - \;                      \
    new-window -n '#S:#I.#P' -a '                \
      tmux save-buffer - \; delete-buffer | {    \
        if command -v nvim;                      \
        then nvim -R -c "set nofen is hls ic" -; \
        else less;                               \
        fi;                                      \
      };                                         \
    ' \;                                         \
    run-shell 'tmux send-keys G'

    # https://superuser.com/a/1319237
    # Emulate scrolling by sending up and down keys if these commands are running in the pane
    tmux_commands_with_legacy_scroll="nano less more man"
    bind-key -T root WheelUpPane \
        if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
            'send -Mt=' \
            'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                "send -t= Up Up Up Up Up" "copy-mode -et="'

    bind-key -T root WheelDownPane \
        if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
            'send -Mt=' \
            'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                "send -t= Down Down Down Down Down" "send -Mt="'

    # Double LMB Select & Copy (Word)
    # bind-key -T copy-mode-vi DoubleClick1Pane \
    #   select-pane \; \
    #   send-keys -X select-word-no-clear \; \
    #   send-keys -X copy-pipe-no-clear "xclip -in -sel primary >/dev/null"
    #   bind-key -n DoubleClick1Pane \
    #   select-pane \; \
    #   copy-mode -M \; \
    #   send-keys -X select-word \; \
    #   send-keys -X copy-pipe-no-clear "xclip -in -sel primary >/dev/null"

    # Triple LMB Select & Copy (Line)
    # bind-key -T copy-mode-vi TripleClick1Pane \
    #   select-pane \; \
    #   send-keys -X select-line \; \
    #   send-keys -X copy-pipe-no-clear "xclip -in -sel primary >/dev/null"
    #   bind-key -n TripleClick1Pane \
    #   select-pane \; \
    #   copy-mode -M \; \
    #   send-keys -X select-line \; \
    #   send-keys -X copy-pipe-no-clear "xclip -in -sel primary >/dev/null"

    # split full window
    # bind-key | split-window -fh -c "#{pane_current_path}"
    # bind-key _ split-window -fv -c "#{pane_current_path}

    # tmux-copy-toolkit
    bind-key -T copy-mode-vi s run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T root M-s run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T root M-y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 1"
    bind-key -T root M-q run-shell -b "python3 $HOME/.config/tmux/copytk.py quickcopy"

    bind-key -T copy-mode-vi S switch-client -T copytk
    bind-key -T copytk s run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T copytk S run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 2"
    bind-key -T copytk k run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines --search-direction backward"
    bind-key -T copytk j run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines --search-direction forward"
    bind-key -T copytk n run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines"
    bind-key -T copytk y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 1"
    bind-key -T copytk Y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 2"

} \
{
  bind-key -T root M-: command-prompt
  bind-key -T root M-C split-window -v -c '#{pane_current_path}'
  bind-key -T root M-V split-window -h -c '#{pane_current_path}'
  bind-key -T root M-H run-shell "if $is_vim ; then tmux send-keys M-h; else tmux select-pane -L; fi"
  bind-key -T root M-J run-shell "if $is_vim ; then tmux send-keys M-j; else tmux select-pane -D; fi"
  bind-key -T root M-K run-shell "if $is_vim ; then tmux send-keys M-k ; else tmux select-pane -U; fi"
  bind-key -T root M-L run-shell "if $is_vim ; then tmux send-keys M-l; else tmux select-pane -R; fi"
  bind-key -T root M-S-Left swap-pane -U
  bind-key -T root M-S-Right swap-pane -D
  bind-key -T root M-S-Up swap-window -d -t -1
  bind-key -T root M-S-Down swap-window -d -t +1
  bind-key -T root M-M new-window -c '#{pane_current_path}'
  bind-key -T root M-< new-window
  bind-key -T root M-Z resize-pane -Z
  bind-key -T root M-) select-window -T -t :=0
  bind-key -T root M-! select-window -T -t :=1
  bind-key -T root M-@ select-window -T -t :=2
  bind-key -T root M-# select-window -T -t :=3
  bind-key -T root M-$ select-window -T -t :=4
  bind-key -T root M-% select-window -T -t :=5
  bind-key -T root M-^ select-window -T -t :=6
  bind-key -T root M-& select-window -T -t :=7
  bind-key -T root M-* select-window -T -t :=8
  bind-key -T root M-( select-window -T -t :=9
  bind-key -T root 'M-{' copy-mode
  bind-key -T root 'M-}' paste-buffer
  bind-key -T root M-+ detach-client
  bind-key -T root M-N next-window
  bind-key -T root M-P previous-window
  bind-key -T root M-R refresh-client
  bind-key -T root M-S-F9 send-keys C-l \; run-shell 'sleep 0.2' \; clear-history
  bind-key -T root M-S-F12 send-keys -R \; run-shell 'sleep 0.2' \; clear-history
  bind-key -T root 'M-"' last-window
  bind-key -T root ä last-window
  bind-key -T root M-U copy-mode -u \; send-keys 0
  bind-key -T copy-mode-vi M-U send-keys -X page-up
  bind-key -T copy-mode-vi M-D send-keys -X page-down
  bind-key -T copy-mode-vi u send-keys -X page-up
  bind-key -T copy-mode-vi d send-keys -X page-down
  bind-key -T copy-mode-vi v send -X begin-selection
  bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
  bind-key -T copy-mode-vi Y send-keys -X copy-selection
  # search buffer using Vim or less
  bind-key -n M-|                                \
    capture-pane -J -S - \;                      \
    new-window -n '#S:#I.#P' -a '                \
      tmux save-buffer - \; delete-buffer | {    \
        if command -v nvim;                      \
        then nvim -R -c "set nofen is hls ic" -; \
        else less;                               \
        fi;                                      \
      };                                         \
    ' \;                                         \
    run-shell 'tmux send-keys G'

    # Emulate scrolling by sending up and down keys if these commands are running in the pane
    tmux_commands_with_legacy_scroll="nano less more man"
    bind-key -T root WheelUpPane \
        if-shell -Ft= '#{?mouse_any_flag,1,#{pane_in_mode}}' \
            'send -Mt=' \
            'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                "send -t= Up Up Up Up Up" "copy-mode -et="'

    bind-key -T root WheelDownPane \
        if-shell -Ft = '#{?pane_in_mode,1,#{mouse_any_flag}}' \
            'send -Mt=' \
            'if-shell -t= "#{?alternate_on,true,false} || echo \"#{tmux_commands_with_legacy_scroll}\" | grep -q \"#{pane_current_command}\"" \
                "send -t= Down Down Down Down Down" "send -Mt="'

    # tmux-copy-toolkit
    bind-key -T copy-mode-vi s run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T root M-S run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T root M-Y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 1"
    # bind-key -T root M-q run-shell -b "python3 $HOME/.config/tmux/copytk.py quickcopy"

    bind-key -T copy-mode-vi S switch-client -T copytk
    bind-key -T copytk s run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 1"
    bind-key -T copytk S run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-search --search-nkeys 2"
    bind-key -T copytk k run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines --search-direction backward"
    bind-key -T copytk j run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines --search-direction forward"
    bind-key -T copytk n run-shell -b "python3 $HOME/.config/tmux/copytk.py easymotion-lines"
    bind-key -T copytk y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 1"
    bind-key -T copytk Y run-shell -b "python3 $HOME/.config/tmux/copytk.py easycopy --search-nkeys 2"
}
